const axios = require('axios');
const jwt = require('jsonwebtoken');
require('dotenv').config();

describe('Check data function', () => {

    test('Email exist', async () => {
        const res = await axios.get(
            `http://localhost:8080/users/checkAddr`,
            {
                params: {
                    email: "lucie@mypetslife.co",
                }
            });
        expect(res.status).toBe(200);
    }, 30000);

    test('Email does not exist', async () => {
        const res = await axios.get(
            `http://localhost:8080/users/checkAddr`,
            {
                params: {
                    email: "lucie@mypetslife.com",
                }
            });
        expect(res.status).toBe(201);
    }, 30000);

    test('Pseudo exist', async () => {
        const res = await axios.get(
            `http://localhost:8080/users/checkPseudo`,
            {
                params: {
                    pseudo: "lucie33600"
                }
            });
        expect(res.status).toBe(200);
    }, 30000);

    test('Pseudo does not exist', async () => {
        const res = await axios.get(
            `http://localhost:8080/users/checkPseudo`,
            {
                params: {
                    pseudo: "lucie3"
                }
            });
        expect(res.status).toBe(201);
    }, 30000);

});

describe('Login tests', () => {

    test('User exist', async () => {
        const res = await axios.get(
            `http://localhost:8080/users/loginUser`,
            {
                params: {
                    email: "lucie@mypetslife.co",
                }
            });
        expect(res.status).toBe(200);
    }, 30000);

    test('Wrong email', async () => {
        const res = await axios.get(
            `http://localhost:8080/users/loginUser`,
            {
                params: {
                    email: "lucie@mypetslife",
                    password: "Admin123"
                }
            });
        expect(res.status).toBe(202);
    }, 30000);

});

describe('Confirm email tests', () => {

    test('Send a confirmation email', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/sendConfirmEmail`,
            {
                params: {
                    email: "lucie@mypetslife.co",
                },
            }
        );
        expect(res.status).toBe(200);
    }, 30000);

    test('Send a confirmation at wrong email', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/sendConfirmEmail`,
            {
                params: {
                    email: "lucie@mypetslife",
                },
            }
        );
        expect(res.status).toBe(202);
    }, 30000);

    test('Change the email and send a confirmation email', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/changeEmailAndConfirm`,
            {
                params: {
                    oldEmail: "lucie@mypetslife.co",
                    email: "lucie@mypetslife.co"
                },
            }
        );
        expect(res.status).toBe(201);
    }, 30000);
});

describe('Check contact mail function', () => {

    test('Form is complete', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/sendContactMail`,
            {
                params: {
                    firstName: "test",
                    lastName: "test",
                    email: "lucie@mypetslife.co",
                    phone: "0600000000",
                    object: "test",
                    subObject: "ignorer le message",
                    message: "ceci est un test de dveloppement ne pas repondre",
                    tr: "fr"
                },
            });
        expect(res.status).toBe(200);
    }, 30000);

});

describe('Check newsletter mail function', () => {

    test('Form is complete', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/sendConfirmNewsletterEmail`,
            {
                params: {
                    email: "lucie@mypetslife.co",
                    tr: "fr"
                },
            }
        );
        expect(res.status).toBe(200);
    }, 30000);

    /*test('Email is valid', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/subscribeNewsletter`,
            {
                params: {
                    email: "lucie@mypetslife.co",
                },
            }
        );
        expect(res.status).toBe(200);
    },30000);

    test('Email is invalid', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/subscribeNewsletter`,
            {
                params: {
                    email: "dayet.lucie@gmail.com",
                },
            }
        );
        expect(res.status).toBe(201);
    },30000);*/

});

describe('Check forgot password function', () => {

    test('Email exist', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/forgotPassword`,
            {
                params: {
                    email: "lucie@mypetslife.co",
                    tr: "fr"
                },
            }
        );
        expect(res.status).toBe(200);
    }, 30000);

    test('Email do not exist', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/forgotPassword`,
            {
                params: {
                    email: "lucie@mypetslife.com",
                    tr: "fr"
                },
            }
        );
        expect(res.status).toBe(202);
    }, 30000);

    test('Token is invalid', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/resetPassword`,
            {
                params: {
                    token: "test",
                    password: "test"
                },
            }
        );
        expect(res.status).toBe(202);
    }, 30000);

});

describe('Testing Avatar Upload', () => {

    test('Avatar is valid and id does not exist', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/updateUserAvatar`,
            {
                params: {
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..uWM_X-Bz5zHSCx36s5C1yzn01gC4oC64kxjnsh3avec"
                },
            }
        );
        expect(res.status).toBe(200);
    });

    test('Token is invalid', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/updateUserAvatar`,
            {
                params: {
                    token: "test",
                },
            }
        );
        expect(res.status).toBe(202);
    });

    test('Id is not valid', async () => {
        const token = {
            _id: "test",
            avatar: "data:image/png;base64"
        };
        const res = await axios.post(
            `http://localhost:8080/users/updateUserAvatar`,
            {
                params: {
                    token: jwt.sign(
                        {token},
                        process.env.SECRET_TOKEN
                    )
                },
            }
        );
        expect(res.status).toBe(202);
    });

});

describe('Testing Home Information Update', () => {

    test('Home informations are valid and id exist', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/updateUserHomeInfos`,
            {
                params: {
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7Il9pZCI6IjVmNGE4YjM0ZGUyYWY5MDA3OTM2YTJhMSIsImhvdXNlIjoiaG91c2UiLCJpc19ob3VzZV9vd25lciI6dHJ1ZSwiaGF2ZV9ob3VzZV9vd25lcl9hY2NvcmQiOnRydWUsImdhcmRlbiI6dHJ1ZSwiZ2FyZGVuX3N1cmZhY2UiOjEyLCJnYXJkZW5fdW5pdHkiOiJtIiwiZ2FyZGVuX2ZlbmNlIjp0cnVlfX0.08b6xawXxnSWHO6qynIN2SAawvmKl19OTATVQAgq914"
                },
            }
        );
        expect(res.status).toBe(200);
    });

    test('Home informations are valid but id is not valid', async () => {
        const token = {
            data: {
                _id: "test",
                house: "house",
                is_house_owner: true,
                have_house_owner_accord: true,
                garden: true,
                garden_surface: 12,
                garden_unity: "m",
                garden_fence: true
            }
        };
        const res = await axios.post(
            `http://localhost:8080/users/updateUserHomeInfos`,
            {
                params: {
                    token: jwt.sign(
                        {token},
                        process.env.SECRET_TOKEN
                    )
                },
            }
        );
        expect(res.status).toBe(202);
    });

    test('Token is invalid', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/updateUserHomeInfos`,
            {
                params: {
                    token: "test",
                },
            }
        );
        expect(res.status).toBe(202);
    });

});

describe('Testing Environment Information Update', () => {
    test('Environment informations are valid and id exist', async () => {
        const data = {
            _id: "5f4a8b34de2af9007936a2a1",
            child_number: 1,
            adult_number: 2,
            allergy: true,
            other_pets: true,
            other_pets_description: "blablabla",
        };
        const res = await axios.post(
            `http://localhost:8080/users/updateUserEnvironmentInfos`,
            {
                params: {
                    token: jwt.sign(
                        {data},
                        process.env.SECRET_TOKEN
                    )
                },
            }
        );
        expect(res.status).toBe(200);
    });

    test('Environment informations are valid but id is not valid', async () => {
        const data = {
            _id: "test",
            child_number: 1,
            adult_number: 2,
            allergy: true,
            other_pets: true,
            other_pets_description: "other_pets_description",
        };
        const res = await axios.post(
            `http://localhost:8080/users/updateUserEnvironmentInfos`,
            {
                params: {
                    token: jwt.sign(
                        {data},
                        process.env.SECRET_TOKEN
                    )
                },
            }
        );
        expect(res.status).toBe(202);
    });

    test('Token is invalid', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/updateUserEnvironmentInfos`,
            {
                params: {
                    token: "test",
                },
            }
        );
        expect(res.status).toBe(202);
    });
});

describe('Testing Daily informations Update', () => {
    test('Daily informations are valid and id exist', async () => {
        const data = {
            _id: "5f4a8b34de2af9007936a2a1",
            have_adopted_yet: true,
            pet_adopted_description: "Un petit chat de goutiere",
            adoption_day_night: "adoption_day_night",
            hour_absent: 8,
            adoption_activities: "Des balades et des jeux",
            walk_number: 7
        };
        const res = await axios.post(
            `http://localhost:8080/users/updateUserDailyInfos`,
            {
                params: {
                    token: jwt.sign(
                        {data},
                        process.env.SECRET_TOKEN
                    )
                },
            }
        );
        expect(res.status).toBe(200);
    });

    test('Daily informations are valid but id is not valid', async () => {
        const data = {
            _id: "test",
            have_adopted_yet: true,
            pet_adopted_description: "Un petit chat de goutiere",
            adoption_day_night: "adoption_day_night",
            hour_absent: 8,
            adoption_activities: "Des balades et des jeux",
            walk_number: 7
        };
        const res = await axios.post(
            `http://localhost:8080/users/updateUserDailyInfos`,
            {
                params: {
                    token: jwt.sign(
                        {data},
                        process.env.SECRET_TOKEN
                    )
                },
            }
        );
        expect(res.status).toBe(202);
    });

    test('Token is invalid', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/updateUserDailyInfos`,
            {
                params: {
                    token: "test",
                },
            }
        );
        expect(res.status).toBe(202);
    });
});

describe('Testing Motivation informations Update', () => {
    test('Motivation informations are valid and id exist', async () => {
        const data = {
            _id: "5f4a8b34de2af9007936a2a1",
            adoption_why: "adoption_why",
            adoption_when: "adoption_when",
            adoption_research: "adoption_research"
        };
        const res = await axios.post(
            `http://localhost:8080/users/updateUserMotivationInfos`,
            {
                params: {
                    token: jwt.sign(
                        {data},
                        process.env.SECRET_TOKEN
                    )
                },
            }
        );
        expect(res.status).toBe(200);
    });

    test('Motivation informations are valid but id is not valid', async () => {
        const data = {
            _id: "test",
            adoption_why: "adoption_why",
            adoption_when: "adoption_when",
            adoption_research: "adoption_research"
        };
        const res = await axios.post(
            `http://localhost:8080/users/updateUserMotivationInfos`,
            {
                params: {
                    token: jwt.sign(
                        {data},
                        process.env.SECRET_TOKEN
                    )
                },
            }
        );
        expect(res.status).toBe(202);
    });

    test('Token is invalid', async () => {
        const res = await axios.post(
            `http://localhost:8080/users/updateUserMotivationInfos`,
            {
                params: {
                    token: "test",
                },
            }
        );
        expect(res.status).toBe(202);
    });
});
